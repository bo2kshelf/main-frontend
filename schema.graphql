schema {
  query: Query
  mutation: Mutation
}
type Author {
  id: ID!
  name: String!
  writes(skip: Int, limit: Int): [Writing!]!
  relatedSeries(skip: Int, limit: Int): [AuthorSeriesRelation!]!
}
type AuthorSeriesRelation {
  author: Author!
  series: Series!
  relatedBooks(skip: Int, limit: Int): [Book!]!
}
type Book {
  id: ID!
  title: String!
  isbn(dehyphenize: Boolean = true): String
  writedBy(skip: Int, limit: Int): [Writing!]!
  seriesOf(skip: Int, limit: Int): SeriesPartsPayload!
  publishedBy(skip: Int, limit: Int): [Publication!]!
  cover: String
}
input CreateAuthorDataInput {
  name: String!
}
input CreateBookDataInput {
  title: String!
  isbn: String
}
input CreatePublisherDataInput {
  name: String!
}
input CreateSeriesDataInput {
  title: String!
}
type HaveBookRecord {
  account: Account!
  book: Book!
  have: Boolean!
}
type HaveBooksPayload {
  records: [HaveBookRecord!]!
  count: Int!
  skip: Int!
  limit: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
"""A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`."""
scalar LocalDate
enum OrderBy {
  ASC
  DESC
}
type Publication {
  publisher: Publisher!
  book: Book!
}
type Publisher {
  id: ID!
  name: String!
  publications(skip: Int, limit: Int): [Publication!]!
}
type ReadBookRecord {
  account: Account!
  book: Book!
  date: LocalDate!
}
type ReadBooksPayload {
  records: [ReadBookRecord!]!
  count: Int!
  skip: Int!
  limit: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type ReadingBookRecord {
  account: Account!
  book: Book!
  reading: Boolean!
}
type ReadingBooksPayload {
  records: [ReadingBookRecord!]!
  count: Int!
  skip: Int!
  limit: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type Series {
  id: ID!
  title: String!
  booksOf(skip: Int, limit: Int, orderBy: SeriesPartsArgsOrderBy): SeriesPartsPayload!
  relatedAuthors(skip: Int, limit: Int): [AuthorSeriesRelation!]!
}
type SeriesPart {
  series: Series!
  book: Book!
  volume: Float
}
input SeriesPartsArgsOrderBy {
  title: OrderBy
  volume: OrderBy
}
type SeriesPartsPayload {
  parts: [SeriesPart!]!
  count: Int!
  skip: Int!
  limit: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type StackedBookRecord {
  account: Account!
  book: Book!
}
type StackedBooksPayload {
  records: [StackedBookRecord!]!
  count: Int!
  skip: Int!
  limit: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type WishReadBookRecord {
  account: Account!
  book: Book!
  wish: Boolean!
}
type WishReadBooksPayload {
  records: [WishReadBookRecord!]!
  count: Int!
  skip: Int!
  limit: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type Writing {
  author: Author!
  book: Book!
  roles: [String!]
}
input SearchAuthorsQuery {
  name: String!
}
type SearchAuthorsResult {
  aggregate: SearchAuthorsResultAggregate!
  pageInfo: SearchAuthorsResultPageInfo!
  edges: [SearchAuthorsResultEdgeType!]!
}
type SearchAuthorsResultAggregate {
  count: Int!
}
type SearchAuthorsResultEdgeType {
  node: Author!
  cursor: String!
}
type SearchAuthorsResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchAuthorsResultPageInfoQuery!
}
type SearchAuthorsResultPageInfoQuery {
  name: String!
}
input SearchBooksQuery {
  title: String!
}
type SearchBooksResult {
  aggregate: SearchBooksResultAggregate!
  pageInfo: SearchBooksResultPageInfo!
  edges: [SearchBooksResultEdgeType!]!
}
type SearchBooksResultAggregate {
  count: Int!
}
type SearchBooksResultEdgeType {
  node: Book!
  cursor: String!
}
type SearchBooksResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchBooksResultPageInfoQuery!
}
type SearchBooksResultPageInfoQuery {
  title: String!
}
input SearchMixedQuery {
  query: String
}
type SearchMixedResult {
  aggregate: SearchMixedResultAggregate!
  pageInfo: SearchMixedResultPageInfo!
  edges: [SearchMixedResultEdgeType!]!
}
type SearchMixedResultAggregate {
  count: Int!
}
type SearchMixedResultEdgeType {
  node: SearchMixedUnion!
  cursor: String!
}
type SearchMixedResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchMixedResultPageInfoQuery!
}
type SearchMixedResultPageInfoQuery {
  query: String
}
union SearchMixedUnion = Book | Author | Series
input SearchSeriesQuery {
  title: String!
}
type SearchSeriesResult {
  aggregate: SearchSeriesResultAggregate!
  pageInfo: SearchSeriesResultPageInfo!
  edges: [SearchSeriesResultEdgeType!]!
}
type SearchSeriesResultAggregate {
  count: Int!
}
type SearchSeriesResultEdgeType {
  node: Series!
  cursor: String!
}
type SearchSeriesResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchSeriesResultPageInfoQuery!
}
type SearchSeriesResultPageInfoQuery {
  title: String!
}
type Account {
  id: ID!
  userName: ID!
  displayName: String!
  picture: String!
  readBooks(skip: Int, limit: Int): ReadBooksPayload!
  readingBooks(skip: Int, limit: Int): ReadingBooksPayload!
  wishReadBooks(skip: Int, limit: Int): WishReadBooksPayload!
  haveBooks(skip: Int, limit: Int): HaveBooksPayload!
  stackedBooks(skip: Int, limit: Int): StackedBooksPayload!
}
input CreateAccountDataInput {
  userName: ID!
  displayName: String!
  picture: String!
  userId: ID!
}
type GitHubAuthPayload {
  user: User!
  accessToken: String!
}
type GitHubUser {
  githubId: ID!
  userName: ID!
  displayName: String!
  picture: String!
}
type User {
  id: ID!
  account: Account
  github: GitHubUser
}
type Query {
  book(id: ID!): Book!
  allBooks: [Book!]!
  author(id: ID!): Author!
  allAuthors: [Author!]!
  series(id: ID!): Series!
  allSeries: [Series!]!
  publisher(id: ID!): Publisher!
  allPublishers: [Publisher!]!
  searchBooks(after: String, first: Int, before: String, last: Int, query: SearchBooksQuery!): SearchBooksResult!
  searchAuthors(after: String, first: Int, before: String, last: Int, query: SearchAuthorsQuery!): SearchAuthorsResult!
  searchSeries(after: String, first: Int, before: String, last: Int, query: SearchSeriesQuery!): SearchSeriesResult!
  searchMixed(after: String, first: Int, before: String, last: Int, query: SearchMixedQuery!): SearchMixedResult!
  loginGitHubUrl: String!
  currentUser: User!
  account(id: ID, userName: ID): Account!
  allAccounts: [Account!]!
}
type Mutation {
  createBook(data: CreateBookDataInput!): Book!
  createAuthor(data: CreateAuthorDataInput!): Author!
  createSeries(data: CreateSeriesDataInput!): Series!
  connectBookToAuthor(bookId: ID!, authorId: ID!, roles: [String!]): Writing!
  connectBookToSeries(bookId: ID!, seriesId: ID!, volume: Float): SeriesPart!
  switchHaveRecord(accountId: ID!, bookId: ID!, have: Boolean!): HaveBookRecord!
  createReadRecord(accountId: ID!, bookId: ID!, date: LocalDate!): ReadBookRecord!
  switchReadingRecord(accountId: ID!, bookId: ID!, reading: Boolean!): ReadingBookRecord!
  switchWishReadRecord(accountId: ID!, bookId: ID!, wish: Boolean!): WishReadBookRecord!
  createPublisher(data: CreatePublisherDataInput!): Publisher!
  connectBookToPublisher(bookId: ID!, publisherId: ID!): Publication!
  loginGitHub(code: String!): GitHubAuthPayload!
  createAccount(data: CreateAccountDataInput!): Account!
}