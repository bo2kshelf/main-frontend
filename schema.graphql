schema {
  query: Query
  mutation: Mutation
}
type Author {
  id: ID!
  name: String!
  writes(skip: Int, limit: Int): [Writing!]!
}
type Book {
  id: ID!
  title: String!
  isbn(dehyphenize: Boolean = true): String
  writedBy(skip: Int, limit: Int): [Writing!]!
  seriesOf(skip: Int, limit: Int): [SeriesPart!]!
  cover: String
}
input CreateAuthorDataInput {
  name: String!
}
input CreateBookDataInput {
  title: String!
  isbn: String
}
input CreateSeriesDataInput {
  title: String!
}
type Series {
  id: ID!
  title: String!
  parts(skip: Int, limit: Int): [SeriesPart!]!
}
type SeriesPart {
  series: Series!
  book: Book!
  volume: Float
}
type Writing {
  author: Author!
  book: Book!
  roles: [String!]
}
input SearchAuthorsQuery {
  name: String!
}
type SearchAuthorsResult {
  aggregate: SearchAuthorsResultAggregate!
  pageInfo: SearchAuthorsResultPageInfo!
  edges: [SearchAuthorsResultEdgeType!]!
}
type SearchAuthorsResultAggregate {
  count: Int!
}
type SearchAuthorsResultEdgeType {
  node: Author!
  cursor: String!
}
type SearchAuthorsResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchAuthorsResultPageInfoQuery!
}
type SearchAuthorsResultPageInfoQuery {
  name: String!
}
input SearchBooksQuery {
  title: String!
}
type SearchBooksResult {
  aggregate: SearchBooksResultAggregate!
  pageInfo: SearchBooksResultPageInfo!
  edges: [SearchBooksResultEdgeType!]!
}
type SearchBooksResultAggregate {
  count: Int!
}
type SearchBooksResultEdgeType {
  node: Book!
  cursor: String!
}
type SearchBooksResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchBooksResultPageInfoQuery!
}
type SearchBooksResultPageInfoQuery {
  title: String!
}
input SearchMixedQuery {
  query: String
}
type SearchMixedResult {
  aggregate: SearchMixedResultAggregate!
  pageInfo: SearchMixedResultPageInfo!
  edges: [SearchMixedResultEdgeType!]!
}
type SearchMixedResultAggregate {
  count: Int!
}
type SearchMixedResultEdgeType {
  node: SearchMixedUnion!
  cursor: String!
}
type SearchMixedResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchMixedResultPageInfoQuery!
}
type SearchMixedResultPageInfoQuery {
  query: String
}
union SearchMixedUnion = Book | Author | Series
input SearchSeriesQuery {
  title: String!
}
type SearchSeriesResult {
  aggregate: SearchSeriesResultAggregate!
  pageInfo: SearchSeriesResultPageInfo!
  edges: [SearchSeriesResultEdgeType!]!
}
type SearchSeriesResultAggregate {
  count: Int!
}
type SearchSeriesResultEdgeType {
  node: Series!
  cursor: String!
}
type SearchSeriesResultPageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
  query: SearchSeriesResultPageInfoQuery!
}
type SearchSeriesResultPageInfoQuery {
  title: String!
}
input CreateProfileDataInput {
  userName: ID!
  displayName: String!
  picture: String!
  userId: ID!
}
input CreateRecordDataInput {
  bookId: ID!
  have: Boolean!
  read: Boolean!
  reading: Boolean!
}
input CreateRecordUserInput {
  userName: ID!
}
"""A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."""
scalar DateTime
input DeleteRecordWhereInput {
  id: ID!
}
type GitHubAuthPayload {
  user: User!
  accessToken: String!
}
type GitHubUser {
  githubId: ID!
  userName: ID!
  displayName: String!
  picture: String!
}
type Profile {
  id: ID!
  userName: ID!
  displayName: String!
  picture: String!
  records(cursor: ProfileRecordsArgsCursor, skip: Int, take: Int, orderBy: ProfileRecordsArgsOrderBy, where: ProfileRecordsArgsWhere): [Record!]!
}
input ProfileRecordsArgsCursor {
  id: ID!
}
input ProfileRecordsArgsOrderBy {
  createdAt: ProfileRecordsArgsOrderByEnum
  updatedAt: ProfileRecordsArgsOrderByEnum
}
enum ProfileRecordsArgsOrderByEnum {
  ASC
  DESC
}
input ProfileRecordsArgsWhere {
  have: Boolean
  read: Boolean
  reading: Boolean
}
type Record {
  id: ID!
  have: Boolean!
  read: Boolean!
  reading: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  book: Book!
}
input UpdateRecordDataInput {
  have: Boolean
  read: Boolean
  reading: Boolean
}
input UpdateRecordDataUserInput {
  id: ID!
}
type User {
  id: ID!
  profile: Profile
  github: GitHubUser
}
type Query {
  book(id: ID!): Book!
  allBooks: [Book!]!
  author(id: ID!): Author!
  allAuthors: [Author!]!
  series(id: ID!): Series!
  allSeries: [Series!]!
  searchBooks(after: String, first: Int, before: String, last: Int, query: SearchBooksQuery!): SearchBooksResult!
  searchAuthors(after: String, first: Int, before: String, last: Int, query: SearchAuthorsQuery!): SearchAuthorsResult!
  searchSeries(after: String, first: Int, before: String, last: Int, query: SearchSeriesQuery!): SearchSeriesResult!
  searchMixed(after: String, first: Int, before: String, last: Int, query: SearchMixedQuery!): SearchMixedResult!
  loginGitHubUrl: String!
  currentUser: User!
  profile(id: ID, userName: ID): Profile!
  allProfiles: [Profile!]!
  record(id: ID!): Record!
}
type Mutation {
  createBook(data: CreateBookDataInput!): Book!
  createAuthor(data: CreateAuthorDataInput!): Author!
  createSeries(data: CreateSeriesDataInput!): Series!
  connectBookToAuthor(bookId: ID!, authorId: ID!, roles: [String!]): Writing!
  connectBookToSeries(bookId: ID!, seriesId: ID!, volume: Float): SeriesPart!
  loginGitHub(code: String!): GitHubAuthPayload!
  createProfile(data: CreateProfileDataInput!): Profile!
  createRecord(user: CreateRecordUserInput!, data: CreateRecordDataInput!): Record!
  updateRecord(where: UpdateRecordDataUserInput!, data: UpdateRecordDataInput!): Record!
  deleteRecord(where: DeleteRecordWhereInput!): Record!
}