schema {
  query: Query
}
type Author {
  id: ID!
  name: String!
  wroteBooks(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: AuthorWroteBooksArgsOrderBy = {title: ASC}): AuthorWroteBooksReturnType!
  relatedSeries(skip: Int = 0, limit: Int = 0, orderBy: AuthorRelatedSeriesArgsOrderBy = {title: ASC}): AuthorRelatedSeriesReturnType!
}
input AuthorRelatedSeriesArgsOrderBy {
  title: OrderBy
}
type AuthorRelatedSeriesReturnType {
  nodes: [AuthorSeriesRelation!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
enum AuthorRole {
  AUTHOR
  ORIGINAL_AUTHOR
  SUPERVISOR
  PARTICIPANT
  EDITOR
  ILLUSTRATOR
  COMIC_ARTIST
  TRANSLATOR
  TRANSLATE_SUPERVISOR
}
type AuthorSeriesRelation {
  author: Author!
  series: Series!
  relatedBooks(skip: Int = 0, limit: Int = 0, orderBy: AuthorSeriesRelationRelatedBooksArgsOrderBy = {order: ASC, title: ASC}): [Book!]!
}
input AuthorSeriesRelationRelatedBooksArgsOrderBy {
  order: OrderBy
  title: OrderBy
}
input AuthorWroteBooksArgsOrderBy {
  title: OrderBy
}
type AuthorWroteBooksReturnType {
  nodes: [Writing!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type Book {
  id: ID!
  title: String!
  subtitle: String
  isbn(dehyphenize: Boolean = true): String
  writtenBy(orderBy: BookWrittenByArgsOrderBy = {name: ASC}): [Writing!]!
  seriesOf: [SeriesPart!]!
  previousBooks(skip: Int = 0, limit: Int = 1): BookPreviousBooksReturnType!
  nextBooks(skip: Int = 0, limit: Int = 1): BookNextBooksReturnType!
  publishedBy: Publisher
  labeledBy: Label
  cover: String
}
type BookNextBooksReturnType {
  nodes: [NextBookConnection!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type BookPreviousBooksReturnType {
  nodes: [NextBookConnection!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input BookWrittenByArgsOrderBy {
  name: OrderBy
}
"""A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."""
scalar DateTime
type Label {
  id: ID!
  name: String!
  labeledBooks(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: LabelLabeledBooksArgsOrderBy = {title: ASC}): LabelLabeledBooksReturnType!
  belongsTo: PublisherLabelRelation!
}
type Labeling {
  book: Book!
  label: Label!
}
input LabelLabeledBooksArgsOrderBy {
  title: OrderBy
}
type LabelLabeledBooksReturnType {
  nodes: [Labeling!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
"""A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`."""
scalar LocalDate
type NextBookConnection {
  previous: Book!
  next: Book!
}
enum OrderBy {
  ASC
  DESC
}
type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean
  hasNextPage: Boolean
}
type Publication {
  book: Book!
  publisher: Publisher!
}
type Publisher {
  id: ID!
  name: String!
  publishedBooks(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: PublisherPublishedBooksArgsOrderBy = {title: ASC}): PublisherPublishedBooksReturnType!
  hasLabels(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: PublisherHasLabelsArgsOrderBy = {name: ASC}): PublisherHasLabelsReturnType!
}
input PublisherHasLabelsArgsOrderBy {
  name: OrderBy
}
type PublisherHasLabelsReturnType {
  nodes: [PublisherLabelRelation!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type PublisherLabelRelation {
  publisher: Publisher!
  label: Label!
}
input PublisherPublishedBooksArgsOrderBy {
  title: OrderBy
}
type PublisherPublishedBooksReturnType {
  nodes: [Publication!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type Query {
  user(uniqueName: String!): User!
  allUsers: [User!]!
  book(id: ID!): Book!
  allBooks: [Book!]!
  author(id: ID!): Author!
  allAuthors: [Author!]!
  series(id: ID!): Series!
  allSeries: [Series!]!
  publisher(id: ID!): Publisher!
  allPublishers: [Publisher!]!
  label(id: ID!): Label!
  allLabels: [Label!]!
  record(id: ID!): UserRecord!
  allRecords: [UserRecord!]!
  currentUser: User!
}
type Series {
  id: ID!
  title: String!
  headOf: SeriesPart!
  seriesBooks(skip: Int = 0, limit: Int = 0, orderBy: OrderBy = ASC): SeriesSeriesBooksReturnType!
  relatedBooks(skip: Int = 0, limit: Int = 0): SeriesRelatedBooksReturnType!
  relatedAuthors(skip: Int = 0, limit: Int = 0, orderBy: SeriesRelatedAuthorsArgsOrderBy = {name: ASC}): SeriesRelatedAuthorsReturnType!
}
type SeriesPart {
  numberingAs: String
  book: Book!
  series: Series!
}
input SeriesRelatedAuthorsArgsOrderBy {
  name: OrderBy
}
type SeriesRelatedAuthorsReturnType {
  nodes: [AuthorSeriesRelation!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type SeriesRelatedBooksReturnType {
  nodes: [SeriesPart!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type SeriesSeriesBooksReturnType {
  nodes: [SeriesPart!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type User {
  id: ID!
  uniqueName: String!
  displayName: String!
  initialized: Boolean!
  picture: String!
  records(after: String, first: Int, before: String, last: Int, orderBy: UserRecordsArgsOrderBy = {readAt: DESC}): UserRecordConnection!
  haveBooks(after: String, first: Int, before: String, last: Int, orderBy: UserHaveBooksArgsOrderBy = {updatedAt: DESC}): UserHaveBookConnection!
  readBooks(after: String, first: Int, before: String, last: Int, orderBy: UserReadBooksArgsOrderBy = {title: ASC}): UserReadBookConnection!
  readingBooks(after: String, first: Int, before: String, last: Int, orderBy: UserReadingBooksArgsOrderBy = {updatedAt: DESC}): UserReadingBookConnection!
  stackedBooks(after: String, first: Int, before: String, last: Int, orderBy: UserStackedBooksArgsOrderBy = {updatedAt: DESC}): UserStackedBookConnection!
  wishBooks(after: String, first: Int, before: String, last: Int, orderBy: UserWishBooksArgsOrderBy = {updatedAt: DESC}): UserWishBooksConnection!
}
type UserHaveBook {
  updatedAt: DateTime!
  user: User!
  book: Book!
}
type UserHaveBookConnection {
  edges: [UserHaveBookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type UserHaveBookEdge {
  cursor: String!
  node: UserHaveBook!
}
input UserHaveBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UserReadBook {
  user: User!
  book: Book!
}
type UserReadBookConnection {
  edges: [UserReadBookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type UserReadBookEdge {
  cursor: String!
  node: UserReadBook!
}
input UserReadBooksArgsOrderBy {
  title: OrderBy
}
type UserReadingBook {
  updatedAt: DateTime!
  user: User!
  book: Book!
}
type UserReadingBookConnection {
  edges: [UserReadingBookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type UserReadingBookEdge {
  cursor: String!
  node: UserReadingBook!
}
input UserReadingBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UserRecord {
  id: ID!
  readAt: LocalDate
  user: User!
  book: Book!
}
type UserRecordConnection {
  edges: [UserRecordEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type UserRecordEdge {
  cursor: String!
  node: UserRecord!
}
input UserRecordsArgsOrderBy {
  readAt: OrderBy
}
type UserStackedBook {
  user: User!
  book: Book!
}
type UserStackedBookConnection {
  edges: [UserStackedBookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type UserStackedBookEdge {
  cursor: String!
  node: UserStackedBook!
}
input UserStackedBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UserWishBook {
  updatedAt: DateTime!
  user: User!
  book: Book!
}
type UserWishBookEdge {
  cursor: String!
  node: UserWishBook!
}
input UserWishBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UserWishBooksConnection {
  edges: [UserWishBookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}
type Writing {
  roles: [AuthorRole!]!
  book: Book!
  author: Author!
}