schema {
  query: Query
}
type User {
  id: ID!
  uniqueName: String!
  displayName: String!
  picture: String!
  readingBooks(skip: Int = 0, limit: Int = 0, orderBy: UsersReadingBooksArgsOrderBy = {updatedAt: DESC}): UsersReadingBooksReturn!
  hasBooks(skip: Int = 0, limit: Int = 0, orderBy: UsersHasBooksArgsOrderBy = {updatedAt: DESC}): UsersHasBooksReturn!
  wishesReadBooks(skip: Int = 0, limit: Int = 0, orderBy: UsersWishesReadBooksArgsOrderBy = {updatedAt: DESC}): UsersWishReadBooksReturn!
  stackedBooks(skip: Int = 0, limit: Int = 0, orderBy: UsersStackedBooksArgsOrderBy = {updatedAt: DESC}): UsersStackedBooksReturn!
  records(skip: Int = 0, limit: Int = 0, orderBy: UsersRecordsArgsOrderBy = {readAt: DESC}): UsersRecordsReturn!
  readBooks(skip: Int = 0, limit: Int = 0, orderBy: UsersReadBooksArgsOrderBy = {title: ASC}): UsersReadBooksReturn!
}
type Author {
  id: ID!
  name: String!
  writed(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: AuthorWritesArgsOrderBy = {title: ASC}): AuthorWritesReturn!
  relatedSeries(skip: Int = 0, limit: Int = 0, orderBy: AuthorsRelatedSeriesArgsOrderBy = {title: ASC}): AuthorsRelatedSeriesReturn!
}
enum AuthorRole {
  AUTHOR
  ORIGINAL_AUTHOR
  SUPERVISOR
  PARTICIPANT
  EDITOR
  ILLUSTRATOR
  COMIC_ARTIST
  TRANSLATOR
  TRANSLATE_SUPERVISOR
}
type AuthorSeriesRelation {
  author: Author!
  series: Series!
  relatedBooks(skip: Int = 0, limit: Int = 0, orderBy: AuthorSeriesRelationRelatedBooksArgsOrderBy = {order: ASC, title: ASC}): [Book!]!
}
input AuthorSeriesRelationRelatedBooksArgsOrderBy {
  order: OrderBy
  title: OrderBy
}
input AuthorsRelatedSeriesArgsOrderBy {
  title: OrderBy
}
type AuthorsRelatedSeriesReturn {
  nodes: [AuthorSeriesRelation!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input AuthorWritesArgsOrderBy {
  title: OrderBy
}
type AuthorWritesReturn {
  nodes: [Writing!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type Book {
  id: ID!
  title: String!
  subtitle: String
  isbn(dehyphenize: Boolean = true): String
  writedBy(orderBy: BookWritedByArgsOrderBy = {name: ASC}): [Writing!]!
  seriesOf: [SeriesPart!]!
  previousBooks(skip: Int = 0, limit: Int = 1): BooksPreviousReturn!
  nextBooks(skip: Int = 0, limit: Int = 1): BooksNextReturn!
  publishedBy: Publisher
  label: Label
  cover: String
}
type BooksNextReturn {
  nodes: [NextBookConnection!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type BooksPreviousReturn {
  nodes: [NextBookConnection!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input BookWritedByArgsOrderBy {
  name: OrderBy
}
type Label {
  id: ID!
  name: String!
  books(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: LabelsBooksArgsOrderBy = {title: ASC}): LabelsBooksReturn!
  belongsTo: PublisherLabelRelation!
}
type Labeling {
  book: Book!
  label: Label!
}
input LabelsBooksArgsOrderBy {
  title: OrderBy
}
type LabelsBooksReturn {
  nodes: [Labeling!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type NextBookConnection {
  previous: Book!
  next: Book!
}
enum OrderBy {
  ASC
  DESC
}
type Publication {
  book: Book!
  publisher: Publisher!
}
type Publisher {
  id: ID!
  name: String!
  publications(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: PublishersPublicationsArgsOrderBy = {title: ASC}): PublishersPublicationsReturn!
  labels(skip: Int = 0, limit: Int = 0, except: [ID!] = [], orderBy: PublishersLabelsArgsOrderBy = {name: ASC}): PublishersLabelsReturn!
}
type PublisherLabelRelation {
  publisher: Publisher!
  label: Label!
}
input PublishersLabelsArgsOrderBy {
  name: OrderBy
}
type PublishersLabelsReturn {
  nodes: [PublisherLabelRelation!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input PublishersPublicationsArgsOrderBy {
  title: OrderBy
}
type PublishersPublicationsReturn {
  nodes: [Publication!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type Series {
  id: ID!
  title: String!
  head: SeriesPart!
  parts(skip: Int = 0, limit: Int = 0, orderBy: OrderBy = ASC): SeriesPartsReturn!
  subParts(skip: Int = 0, limit: Int = 0, orderBy: SeriesSubSubPartsArgsOrderBy = {order: ASC}): SeriesPartsReturn!
  relatedAuthors(skip: Int = 0, limit: Int = 0, orderBy: SeriesRelatedAuthorsArgsOrderBy = {name: ASC}): SeriesRelatedAuthorsReturn!
}
type SeriesPart {
  numberingAs: String
  book: Book!
  series: Series!
}
type SeriesPartsReturn {
  nodes: [SeriesPart!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input SeriesRelatedAuthorsArgsOrderBy {
  name: OrderBy
}
type SeriesRelatedAuthorsReturn {
  nodes: [AuthorSeriesRelation!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input SeriesSubSubPartsArgsOrderBy {
  order: OrderBy
}
type Writing {
  roles: [AuthorRole!]!
  book: Book!
  author: Author!
}
"""A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."""
scalar DateTime
type HaveBookRecord {
  have: Boolean!
  updatedAt: DateTime!
  user: User!
  book: Book!
}
"""A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`."""
scalar LocalDate
type ReadBookRecord {
  user: User!
  book: Book!
}
type ReadingBookRecord {
  reading: Boolean!
  updatedAt: DateTime!
  user: User!
  book: Book!
}
type Record {
  id: ID!
  readAt: LocalDate
  user: User!
  book: Book!
}
type StackedBookRecord {
  user: User!
  book: Book!
}
input UsersHasBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UsersHasBooksReturn {
  nodes: [HaveBookRecord!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input UsersReadBooksArgsOrderBy {
  title: OrderBy
}
type UsersReadBooksReturn {
  nodes: [ReadBookRecord!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input UsersReadingBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UsersReadingBooksReturn {
  nodes: [ReadingBookRecord!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input UsersRecordsArgsOrderBy {
  readAt: OrderBy
}
type UsersRecordsReturn {
  nodes: [Record!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input UsersStackedBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UsersStackedBooksReturn {
  nodes: [StackedBookRecord!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
input UsersWishesReadBooksArgsOrderBy {
  updatedAt: OrderBy
}
type UsersWishReadBooksReturn {
  nodes: [WishReadBookRecord!]!
  count: Int!
  hasPrevious: Boolean!
  hasNext: Boolean!
}
type WishReadBookRecord {
  wish: Boolean!
  updatedAt: DateTime!
  user: User!
  book: Book!
}
type Query {
  user(uniqueName: String!): User!
  allUsers: [User!]!
  book(id: ID!): Book!
  allBooks: [Book!]!
  author(id: ID!): Author!
  allAuthors: [Author!]!
  series(id: ID!): Series!
  allSeries: [Series!]!
  publisher(id: ID!): Publisher!
  allPublishers: [Publisher!]!
  label(id: ID!): Label!
  allLabels: [Label!]!
  recordById(id: ID!): Record!
}